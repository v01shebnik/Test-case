from fnmatch import * # импорт библиотеки

# №1
def is_prime(n): # функция, которая проверяет является ли число простым
    k = 2 # делитель
    while k**2<=n: # если число делится хотя бы на 1 делитель до корня включительно, ф-ция возвращает False, в противном случае - True
        if n%k==0: 
            return False
        k+=1
    return True


a,b = [], [] 
for x in range (0, 10**7+1): # перебор чисел подходящих под маску A
    if fnmatch(str(x),'2?25*'):
        a.append(x) # добавление в список чисел подходящих под маску A
for y in range (0, 10**7+1): # перебор чисел подходящих под маску B
    if fnmatch(str(y),'1?21*'):
        if is_prime(y):
            b.append(y) # добавление в список чисел подходящих под маску B с условием, что число простое
for num in b:
    if any((t%num==0) for t in a): # проверка, что число B является делителем хотя бы для 1 числа А
        print(num)

# №2
def sum_delit(n): # функция, которая складывает все делители числа
    s = 0
    k = 2  # делитель
    while k**2<n: # если число делится на делитель до корня, то прибавляется делитель и частное
        if n%k==0:
            s+=k
            s+=(n//k)
        k+=1
    if int(n**0.5)==n**0.5: # если корень числа целое число, то он прибавляется к сумме
        s+=int(n**0.5)
    return s


for i in range(3,10**8, 2): # рассматриваем только нечетные числа, т.к. 2-ичная запись четных не может быть палиндромом по заданным условиям
    num = bin(i)[2:]
    num_revers = num[-1::-1]
    if num == num_revers and sum_delit(i)!=0: # проверка на палиндром и то, что сумма делителей не 0
        if  i%sum_delit(i)==0: # проверяем делится ли число на сумму своих делителей
            print(i)   